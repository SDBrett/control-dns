# hacking-jq

# hacking-node
-- notes on promises
-- compare async with new promise
-- use this example

# original function
self.defresh = function() {
        return new Promise(function(resolve, reject) {
                rndc.dump().then((data) => {
                        file.read(bindDir + 'named_dump.db').then((data) => {
                                zone.parse(data).then((schema) => {
                                        file.write(bindDir + 'zonedb.json', JSON.stringify(schema)).then((file) => {
                                                console.log('finished [zonedb.json] file write');
                                                resolve(file);
                                        });
                                });
                        });
                });
        });
};

self.refresh = async function() {
	await rndc.dump();
	return await new Promise(function(resolve, reject) {
		file.read(bindDir + 'named_dump.db').then((data) => {
			zone.parse(data).then((schema) => {
				file.write(bindDir + 'zonedb.json', JSON.stringify(schema)).then((file) => {
					console.log('finished [zonedb.json] file write');
					resolve(file);
				});
			});
		});
	});
};

-- declaring a function as async will now return a Promise
-- this is equivalent to new Promise
-- an async function is declared 'resolved' via the 'return' statement
-- if no return statement is present - function wont correctly block logic flow

self.refresh = async function() {
        await rndc.dump();
        let data = await file.read(bindDir + 'named_dump.db');
        let schema = await zone.parse(data);
        await file.write(bindDir + 'zonedb.json', JSON.stringify(schema));
        console.log('finished [zonedb.json] file write');
        return;
};

